#!/bin/bash

#########################################
### K3ai (keÉª3ai) Plugins - Install Tensorflow Operator (Kubeflow namespace)
### https://github.com/kf5i/k3ai
### Alessandro Festa @bringyourownai
### Gabriele Santomaggio @gsantomaggio
######################################### 

### do not change this setion ###
info()
{
    echo '[INFO] ' "$@"
}

infoL()
{
    echo -en '[INFO] ' "$@\n"
}

sleep_cursor()
{
 chars="/-\|"
 for (( z=0; z<7; z++ )); do
   for (( i=0; i<${#chars}; i++ )); do
    sleep 0.5
    echo -en "${chars:$i:1}" "\r"
  done
done
}

notes()
{
    echo "$@" >> notes
}

wait() 
{
status=1
infoL "Testing.." $1.$2  
while [ : ]
  do
    sleep_cursor &
    k3s kubectl wait --for condition=ready --timeout=14s pod -l  $1  -n $2
    status=$?
    
    if [ $status -ne 0 ]
    then 
      infoL "$1 isn't ready yet. This may take a few minutes..."
      sleep_cursor
    else
      break  
    fi 
  done
}

#######
install(){
     k3s kubectl apply -f - << EOF
apiVersion: v1
kind: Namespace
metadata:
  name: kubeflow
  labels:
    katib-metricscollector-injection: enabled
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: experiments.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.conditions[-1:].type
      name: Status
      type: string
    - JSONPath: .status.conditions[-1:].status
      name: Status
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  version: v1beta1
  scope: Namespaced
  subresources:
    status: {}
  names:
    kind: Experiment
    singular: experiment
    plural: experiments
    categories:
      - all
      - kubeflow
      - katib
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: suggestions.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.conditions[-1:].type
      name: Type
      type: string
    - JSONPath: .status.conditions[-1:].status
      name: Status
      type: string
    - JSONPath: .spec.requests
      name: Requested
      type: string
    - JSONPath: .status.suggestionCount
      name: Assigned
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  version: v1beta1
  scope: Namespaced
  subresources:
    status: {}
  names:
    kind: Suggestion
    singular: suggestion
    plural: suggestions
    categories:
      - all
      - kubeflow
      - katib
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: trials.kubeflow.org
spec:
  additionalPrinterColumns:
    - JSONPath: .status.conditions[-1:].type
      name: Type
      type: string
    - JSONPath: .status.conditions[-1:].status
      name: Status
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date
  group: kubeflow.org
  version: v1beta1
  scope: Namespaced
  subresources:
    status: {}
  names:
    kind: Trial
    singular: trial
    plural: trials
    categories:
      - all
      - kubeflow
      - katib
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: katib-config
  namespace: kubeflow
data:
  metrics-collector-sidecar: |-
    {
      "StdOut": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/file-metrics-collector"
      },
      "File": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/file-metrics-collector"
      },
      "TensorFlowEvent": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/tfevent-metrics-collector",
        "resources": {
          "limits": {
            "memory": "1Gi"
          }
        }
      }
    }
  suggestion: |-
    {
      "random": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-hyperopt"
      },
      "grid": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-chocolate"
      },
      "hyperband": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-hyperband"
      },
      "bayesianoptimization": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-skopt"
      },
      "tpe": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-hyperopt"
      },
      "enas": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-enas",
        "imagePullPolicy": "Always",
        "resources": {
          "limits": {
            "memory": "200Mi"
          }
        }
      },
      "cmaes": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-goptuna"
      },
      "darts": {
        "image": "gcr.io/kubeflow-images-public/katib/v1beta1/suggestion-darts"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katib-controller
  namespace: kubeflow
  labels:
    app: katib-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: katib-controller
  template:
    metadata:
      labels:
        app: katib-controller
      annotations:
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: katib-controller
      containers:
        - name: katib-controller
          image: gcr.io/kubeflow-images-public/katib/v1beta1/katib-controller
          imagePullPolicy: IfNotPresent
          command: ["./katib-controller"]
          args:
            - "--webhook-port=8443"
            - "--trial-resources=MPIJob.v1.kubeflow.org"
          ports:
            - containerPort: 8443
              name: webhook
              protocol: TCP
            - containerPort: 8080
              name: metrics
              protocol: TCP
          env:
            - name: KATIB_CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - mountPath: /tmp/cert
              name: cert
              readOnly: true
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: katib-controller
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: katib-controller
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - serviceaccounts
      - services
      - secrets
      - events
      - namespaces
      - persistentvolumes
      - persistentvolumeclaims
    verbs:
      - "*"
  - apiGroups:
      - ""
    resources:
      - pods
      - pods/log
      - pods/status
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - "*"
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - "*"
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
      - mutatingwebhookconfigurations
    verbs:
      - "*"
  - apiGroups:
      - kubeflow.org
    resources:
      - experiments
      - experiments/status
      - experiments/finalizers
      - trials
      - trials/status
      - trials/finalizers
      - suggestions
      - suggestions/status
      - suggestions/finalizers
    verbs:
      - "*"
  - apiGroups:
      - kubeflow.org
    resources:
      - tfjobs
      - pytorchjobs
      - mpijobs
    verbs:
      - "*"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: katib-controller
  namespace: kubeflow
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: katib-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: katib-controller
subjects:
  - kind: ServiceAccount
    name: katib-controller
    namespace: kubeflow
---
apiVersion: v1
kind: Secret
metadata:
  name: katib-controller
  namespace: kubeflow
---
apiVersion: v1
kind: Service
metadata:
  name: katib-controller
  namespace: kubeflow
  annotations:
    prometheus.io/port: "8080"
    prometheus.io/scheme: http
    prometheus.io/scrape: "true"
spec:
  ports:
    - port: 443
      protocol: TCP
      targetPort: 8443
      name: webhook
    - name: metrics
      port: 8080
      targetPort: 8080
  selector:
    app: katib-controller
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: trial-template
  namespace: kubeflow
  labels:
    app: katib-trial-templates
data:
  defaultTrialTemplate.yaml: |-
    apiVersion: batch/v1
    kind: Job
    spec:
      template:
        spec:
          containers:
            - name: training-container
              image: docker.io/kubeflowkatib/mxnet-mnist
              command:
                - "python3"
                - "/opt/mxnet-mnist/mnist.py"
                - "--batch-size=64"
                - "--lr=${trialParameters.learningRate}"
                - "--num-layers=${trialParameters.numberLayers}"
                - "--optimizer=${trialParameters.optimizer}"
          restartPolicy: Never
  # For ConfigMap templates double quotes must set in commands to correct parse JSON parameters in Trial Template (e.g nn_config, architecture)
  enasCPUTemplate: |-
    apiVersion: batch/v1
    kind: Job
    spec:
      template:
        spec:
          containers:
            - name: training-container
              image: docker.io/kubeflowkatib/enas-cnn-cifar10-cpu
              command:
                - python3
                - -u
                - RunTrial.py
                - --num_epochs=1
                - "--architecture=\"${trialParameters.neuralNetworkArchitecture}\""
                - "--nn_config=\"${trialParameters.neuralNetworkConfig}\""
          restartPolicy: Never
  pytorchJobTemplate: |-
    apiVersion: "kubeflow.org/v1"
    kind: PyTorchJob
    spec:
      pytorchReplicaSpecs:
        Master:
          replicas: 1
          restartPolicy: OnFailure
          template:
            spec:
              containers:
                - name: pytorch
                  image: gcr.io/kubeflow-ci/pytorch-dist-mnist-test:v1.0
                  imagePullPolicy: Always
                  command:
                    - "python"
                    - "/var/mnist.py"
                    - "--lr=${trialParameters.learningRate}"
                    - "--momentum=${trialParameters.momentum}"
        Worker:
          replicas: 2
          restartPolicy: OnFailure
          template:
            spec:
              containers:
                - name: pytorch
                  image: gcr.io/kubeflow-ci/pytorch-dist-mnist-test:v1.0
                  imagePullPolicy: Always
                  command:
                    - "python"
                    - "/var/mnist.py"
                    - "--lr=${trialParameters.learningRate}"
                    - "--momentum=${trialParameters.momentum}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katib-db-manager
  namespace: kubeflow
  labels:
    app: katib
    component: db-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: katib
      component: db-manager
  template:
    metadata:
      name: katib-db-manager
      labels:
        app: katib
        component: db-manager
    spec:
      containers:
        - name: katib-db-manager
          image: gcr.io/kubeflow-images-public/katib/v1beta1/katib-db-manager
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_NAME
              value: "mysql"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: katib-mysql-secrets
                  key: MYSQL_ROOT_PASSWORD
          command:
            - "./katib-db-manager"
          ports:
            - name: api
              containerPort: 6789
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:6789"]
            initialDelaySeconds: 5
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:6789"]
            initialDelaySeconds: 10
            periodSeconds: 60
            failureThreshold: 5
---
apiVersion: v1
kind: Service
metadata:
  name: katib-db-manager
  namespace: kubeflow
  labels:
    app: katib
    component: db-manager
spec:
  type: ClusterIP
  ports:
    - port: 6789
      protocol: TCP
      name: api
  selector:
    app: katib
    component: db-manager
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: katib-mysql
  labels:
    type: local
    app: katib
spec:
  storageClassName: katib
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/katib
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: katib-mysql
  namespace: kubeflow
  labels:
    app: katib
spec:
  storageClassName: katib
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katib-mysql
  namespace: kubeflow
  labels:
    app: katib
    component: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: katib
      component: mysql
  template:
    metadata:
      name: katib-mysql
      labels:
        app: katib
        component: mysql
    spec:
      containers:
        - name: katib-mysql
          image: mysql:8
          args:
            - --datadir
            - /var/lib/mysql/datadir
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: katib-mysql-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "true"
            - name: MYSQL_DATABASE
              value: "katib"
          ports:
            - name: dbapi
              containerPort: 3306
          readinessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "mysql -D ${MYSQL_DATABASE} -u root -p${MYSQL_ROOT_PASSWORD} -e 'SELECT 1'"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
          livenessProbe:
            exec:
              command:
                - "/bin/bash"
                - "-c"
                - "mysqladmin ping -u root -p${MYSQL_ROOT_PASSWORD}"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: katib-mysql
              mountPath: /var/lib/mysql
      volumes:
        - name: katib-mysql
          persistentVolumeClaim:
            claimName: katib-mysql
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: katib-mysql-secrets
  namespace: kubeflow
data:
  MYSQL_ROOT_PASSWORD: dGVzdA== # "test"
---
apiVersion: v1
kind: Service
metadata:
  name: katib-mysql
  namespace: kubeflow
  labels:
    app: katib
    component: mysql
spec:
  type: ClusterIP
  ports:
    - port: 3306
      protocol: TCP
      name: dbapi
  selector:
    app: katib
    component: mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: katib-ui
  namespace: kubeflow
  labels:
    app: katib
    component: ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: katib
      component: ui
  template:
    metadata:
      name: katib-ui
      labels:
        app: katib
        component: ui
    spec:
      containers:
        - name: katib-ui
          image: gcr.io/kubeflow-images-public/katib/v1beta1/katib-ui
          imagePullPolicy: IfNotPresent
          command:
            - "./katib-ui"
          args:
            - "--port=8080"
          env:
            - name: KATIB_CORE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: ui
              containerPort: 8080
      serviceAccountName: katib-ui
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: katib-ui
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - namespaces
    verbs:
      - "*"
  - apiGroups:
      - kubeflow.org
    resources:
      - experiments
      - trials
      - suggestions
    verbs:
      - "*"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: katib-ui
  namespace: kubeflow
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: katib-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: katib-ui
subjects:
  - kind: ServiceAccount
    name: katib-ui
    namespace: kubeflow
---
apiVersion: v1
kind: Service
metadata:
  name: katib-ui
  namespace: kubeflow
  labels:
    app: katib
    component: ui
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: ui
      targetPort: 8080
  selector:
    app: katib
    component: ui
EOF

k3s kubectl apply -f - << EOF
apiVersion: v1
kind: PersistentVolume
metadata:
  name: katib-mysql
  labels:
    type: local
    app: katib
spec:
  storageClassName: katib
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /tmp/katib
EOF
    waiting_pod_array=("app=katib;kubeflow")

    for i in "${waiting_pod_array[@]}"; do 
      echo "$i"; 
      IFS=';' read -ra VALUES <<< "$i"
        wait "${VALUES[0]}" "${VALUES[1]}"
    done


    info "Katib ready!!"

    info "Defining the ingress"
    sleep_cursor
   k3s kubectl apply -f - << EOF
      apiVersion: networking.k8s.io/v1beta1
      kind: IngressClass
      metadata: 
        name: traefik-lb
      spec: 
        controller: traefik.io/ingress-controller
EOF

    k3s kubectl apply -f - << EOF
      apiVersion: "networking.k8s.io/v1beta1"
      kind: "Ingress"
      metadata:
        name: "pytorch-ingress"
        namespace: kubeflow
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2
          
      spec:
        ingressClassName: "traefik-lb"
        rules:
        - http:
            paths:
            - path: "/katib"
              backend:
                serviceName: "pytorch-operator"
                servicePort: 80
EOF

sleep_cursor

IP=$(k3s kubectl get service/traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}' -n kube-system)
info "Katib UI ready at: http://"$IP"/katib" 

notes "[plugin_katib]" 
notes "pipelines UI: http://"$IP"/katib"
}

install 

#######
